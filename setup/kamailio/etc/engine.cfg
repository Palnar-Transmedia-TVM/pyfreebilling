# FreeSWITCH routing blocks
route[FSINBOUND] {
  xlog("L_INFO", "$ci|log|--FSINBOUND--");
  if(ds_is_from_list()){
       remove_hf_re("^X-.*");
       setflag(FLAG_FROM_FS);
       xlog("L_INFO", "$ci|log|Call from FS\n");
       xlog("L_INFO", "$ci|log| return \n");
       return 1;
  }
  xlog("L_INFO", "$ci|log|Message not coming from FS\n");
  # Ã  changer si call PSTN
  xlog("L_INFO", "$ci|log| return \n");
        return -1;
}

route[FSDISPATCH] {
    xlog("L_INFO", "$ci|log|--FSDISPATCH--\n");
        if(!is_method("INVITE")){
        xlog("L_INFO", "$ci|log|Not an INVITE\n");
        xlog("L_INFO", "$ci|log| return \n");
                return;
    }

    # Get callerID
    ## if PAI field
    if (is_present_hf("P-Asserted-Identity") && (!isflagset(FLAG_FROM_FS))) {
        xlog("L_INFO", "$ci|log| PAI detected");
        $avp(s:paicallernum)=$(hdr(P-Asserted-Identity){tobody.user});
        xlog("L_INFO", "$ci|log| Retrieved CallerId ($avp(s:paicallernum)) from P-Asserted-Identity header \r\n");
        xlog("L_INFO", "$ci|log| Remove PAI header \n");
        remove_hf("P-Asserted-Identity");
    }
    $avp(s:callernum)=$fU;

    #Call coming from provider
    if(isflagset(FLAG_FROM_PROV)){
        xlog("L_INFO", "$ci|log|From provider - inbound script starting ... \n");
        xlog("L_INFO", "$ci|log|Number normalization starting ... \n");
        if ($rU=~"^\+") {
            # strip leading +
            xlog("L_INFO", "$ci|log|Callee strip leading + \n");
            $rU=$(rU{s.strip,1});
        }
        if ($fU=~"^\+") {
            # strip leading +
            xlog("L_INFO", "$ci|log|Caller sip_network_ip leading + \n");
            $avp(s:callernum)=$(fU{s.strip,1});
        }

        xlog("L_INFO", "$ci|log|Call type mapping starting ... \n");
        # mark type of outbound calls
        # To internal DID - mark as DID
        route(LOCATION);
        # add Header to FS
        xlog("L_INFO", "$ci|log|Add headers for FS\n");
        xlog("L_INFO", "$ci|log|X-AUTH-IP: $si\n");
        xlog("L_INFO", "$ci|log|X-AUTH-PORT: $sp\n");
        xlog("L_INFO", "$ci|log|X-PyFB-AccountId: $au\n");
        xlog("L_INFO", "$ci|log|X-PyFB-CallerNum: $avp(s:callernum)\n");
        append_hf("X-AUTH-IP: $si\r\n");
        append_hf("X-AUTH-PORT: $sp\r\n");
        append_hf("X-PyFB-DestNum: $rU\r\n");
        append_hf("X-PyFB-CallerNum: $avp(s:callernum)\r\n");

        if ($avp(s:dest)=="DID") {
            xlog("L_INFO", "$ci|log|Call type : DIDIN NUMBER \n");
            append_hf("X-PyFB-CallType: DIDIN\r\n");
            route(FSRELAY);
        } else {
            if (!registered("location")){
                exit;
            }
        }
    }

    #Call coming from FS
        if(isflagset(FLAG_FROM_FS)){
        remove_hf("Remote-Party-ID");
        xlog("L_INFO", "$ci|log|Message coming from FS : Routing outside - Call type : $hdr(X-PyFB-CallType)\n");
        # test type of call
        if($hdr(X-PyFB-CallType) == "DIDOUT"||$hdr(X-PyFB-CallType) == "DIDIN") {
            xlog("L_INFO", "$ci|log|Route to corresponding user \n");
            route(LOCATION);
        } else {
            xlog("L_INFO", "$ci|log|Route to PSTN \n");
            route(PSTN);
        }
        remove_hf_re("^X-");
        xlog("L_INFO", "$ci|log| return \n");
                return;
  }

  # Call coming from customer
  if(isflagset(FLAG_FROM_CUST)){
    xlog("L_INFO", "$ci|log|From customer - outbound script starting ... \n");
    xlog("L_INFO", "$ci|log|Number normalization starting ... \n");
    if ($rU=~"^\+") {
      # strip leading +
      xlog("L_INFO", "$ci|log|Callee strip leading + \n");
      $rU=$(rU{s.strip,1});
    }
    if ($fU=~"^\+") {
      # strip leading +
      xlog("L_INFO", "$ci|log|Caller strip leading + \n");
      $avp(s:callernum)=$(fU{s.strip,1});
    }
    #dialplan
    append_hf("X-PyFB-CalleeNum: $rU\r\n");
    xlog("L_INFO", "SIP Account number : $var(sipaccount)\n");
    if (avp_db_load("$var(sipaccount)", "$avp(s:grpnormcallee)")) {
      xlog("L_INFO", "$ci|log|Grp callee number normalization rules found $avp(s:grpnormcallee)\n");
      xlog("L_INFO", "$ci|log|Callee Number before norm : $rU\n");
      if (!dp_translate("$avp(s:grpnormcallee)", "$rU/$rU")) {
        xlog("L_INFO", "$ci|log|No callee number normalization rules found in grp\n");
      }
      xlog("L_INFO", "$ci|log|Callee Number after norm : $rU\n");
    } else {
      xlog("L_INFO", "$ci|log|No grp callee number normalization rules found\n");
    }
    if (avp_db_load("$var(sipaccount)", "$avp(s:grpnormcaller)")) {
      xlog("L_INFO", "$ci|log|Grp caller number normalization rules found $avp(s:grpnormcaller)\n");
      xlog("L_INFO", "$ci|log|Caller Number before norm : $fU\n");
      if (!dp_translate("$avp(s:grpnormcaller)", "$fU/$avp(s:callernum)")) {
        xlog("L_INFO", "$ci|log|No caller number normalization rules found in grp\n");
        # $avp(s:callernum) = $fU;
        # uac_replace_from("sip:$avp(s:callernum)@$fd");
      }
      xlog("L_INFO", "$ci|log|Caller Number after norm : $avp(s:callernum)\n");
    } else {
      xlog("L_INFO", "$ci|log|No grp caller number normalization rules found\n");
    }

    xlog("L_INFO", "$ci|log|Call type mapping starting ... \n");
    # mark type of outbound calls
    # To internal DID - mark as DID
    route(LOCATION);

    # add Header to FS
    xlog("L_INFO", "$ci|log|Add headers for FS\n");
    xlog("L_INFO", "$ci|log|X-AUTH-IP: $si\n");
    xlog("L_INFO", "$ci|log|X-AUTH-PORT: $sp\n");
    xlog("L_INFO", "$ci|log|X-PyFB-AccountId: $au\n");
    xlog("L_INFO", "$ci|log|X-PyFB-CallerNum: $avp(s:callernum)\n");
    append_hf("X-AUTH-IP: $si\r\n");
    append_hf("X-AUTH-PORT: $sp\r\n");
    append_hf("X-PyFB-DestNum: $rU\r\n");
    append_hf("X-PyFB-CallerNum: $avp(s:callernum)\r\n");

    if ($avp(s:dest)=="DID") {
      xlog("L_INFO", "$ci|log|Call type : DID NUMBER \n");
      append_hf("X-PyFB-CallType: DIDOUT\r\n");
      route(FSRELAY);
    }
    if (!dp_translate("0", "$rU/$avp(s:dest)")){
      xlog("L_INFO", "$ci|log|Invalid Destination\n");
      send_reply("420", "Invalid Destination");
      exit;
    } else {
      xlog("L_INFO", "$ci|log|s:dest value : $avp(s:dest) \n");
    }
    # To Urgency number - mak as EMERGENCY
    if ($avp(s:dest)=="EMERGENCY") {
      xlog("L_INFO", "$ci|log|Call type : EMERGENCY NUMBER \n");
      append_hf("X-PyFB-CallType: EMERGENCY\r\n");
      route(FSRELAY);
    }
    # To Own number - mark as OWN
    if ($avp(s:dest)=="OWN") {
      xlog("L_INFO", "$ci|log|Call type : OWN NUMBER \n");
      append_hf("X-PyFB-CallType: OWN\r\n");
      route(FSRELAY);
    }
    # Outbound call - mark as PSTN
    xlog("L_INFO", "$ci|log|Call type : PSTN NUMBER \n");
    append_hf("X-PyFB-CallType: PSTN\r\n");
    route(FSRELAY);
  }
  # ds_mark_dst("P");
  else {
    if (!registered("location")){
      exit;
    }
    route(FSRELAY);
  }
        #route(LOCATION);
}

route[FSRELAY] {
  xlog("L_INFO", "$ci|log|--FSRELAY--\n");

  # Call coming from provider
  if(isflagset(FLAG_FROM_PROV)){
      $avp(s:fsroute) = GROUP_SOFIA_EXT;
      #ifdef MY_IP_ADDRESS_EXTERNAL
          force_send_socket("MY_IP_ADDRESS_EXTERNAL");
      #endif
      xlog("L_INFO", "$ci|log|Route to FS profile : externe - port 5092 \n");
  } else {
      $avp(s:fsroute) = GROUP_SOFIA_INT;
      #ifdef MY_IP_ADDRESS_INTERNAL
          force_send_socket("MY_IP_ADDRESS_INTERNAL");
      #endif
      xlog("L_INFO", "$ci|log|Route to FS profile : interne - port 5090 \n");
  }

  if(!ds_select_dst($avp(s:fsroute), "4")) {
    xlog("L_INFO", "$ci|log|No FS available - end \n");
    xlog("L_INFO", "$ci|stop|----------------------------\n");
    sl_send_reply("500", "Service Unavailable");
    exit;
  }
  xlog("L_INFO", "$ci|log|List of FS available : $avp(AVP_DST)\n");
  xlog("L_INFO", "$ci|log|FS server found : relay message to $du\n");
  if($var(newbranch)==1)
  {
          append_branch();
          $var(newbranch) = 0;
  }
  xlog("L_INFO", "$ci|log| return \n");
  t_set_fr(0,1000);
  t_on_failure("RTF_DISPATCH");
  route(RELAY);
  exit;
}

# Manage failure routing cases
failure_route[RTF_DISPATCH] {
  xlog("L_INFO", "$ci|log|--RTF DISPATCH--\n");
        if (t_is_canceled()) {
                exit;
        }
        # next DST - only for 500 or local timeout
        if (t_check_status("500")
                        or (t_branch_timeout() and !t_branch_replied()))
        {
                #we mark the destination Inactive and Probing
                ds_mark_dst("tp");
                #select the new destination
                if(ds_next_dst())
                {
                        t_set_fr(0,1000);
                        xlog("L_INFO", "$ci|log|Send to next FS server : relay message to $du\n");
                        t_on_failure("RTF_DISPATCH");
                        route(RELAY);
                        exit;
                }
                else
                {
                        #last available node failed to reply, no other destination available
                        xlog("L_INFO", "$ci|log|No more FS server available : END\n");
                        send_reply("404", "No destination");
                        exit;
                }
        }
}

# Dispatcher detects a destination goes down
event_route[dispatcher:dst-down] {
    xlog("L_ERR", "DISPATCHER|log|FS server down: $rm $ru ($du)\n");
}

# Dispatcher detects a destination comes up
event_route[dispatcher:dst-up] {
    xlog("L_ERR", "DISPATCHER|log|FS server up: $rm $ru\n");
}
