
#-------------
#-------------
## 14_auth.cfg
#-------------

# Authorization and authentication
# First determine the origini of the call based on IP address :
# 1- from customer
# 2- from provider IP Auth
# 3- From provider - registred gateway
# 4- from customer et REGISTER message
#
# The second step is to determine is the sip user is registred (Not for the POC)
route[AUTH] {
    xlog("L_INFO", "--AUTH-\n");
    xlog("L_INFO", " Starting auth process ...\n");

    xlog("L_INFO", "IP Auth process ...\n");

    # 1- message fom customer
    xlog("L_INFO", "IP Auth customer ...\n");
    if(route(MSG_RECV_INTERNAL)) {
        if((!is_method("REGISTER")) && allow_source_address(TRUSTED_ADR_GR_CUST)) {
            xlog("L_INFO", "Set flag FLAG_FROM_CUSTOMER\n");
            setflag(FLAG_FROM_CUST);
            $var(sipaccount) = $avp(s:sipacid);
            append_hf("X-PyFB-AccountId: $avp(s:sipacid)\r\n");
            xlog("L_INFO", "Call from customer : Source IP allowed - sipaccount : $avp(s:sipacid)\n"); # source IP allowed
            xlog("L_INFO", " return \n");
            return;
        }
    }

    # 2- message from provider
    xlog("L_INFO", "IP Auth provider ...\n");
    if(route(MSG_RECV_EXTERNAL)) {
        if((!is_method("REGISTER")) && allow_source_address(TRUSTED_ADR_GR_GW)) {
            xlog("L_INFO", "Set flag FLAG_FROM_PROVIDER\n");
            setflag(FLAG_FROM_PROV);
            xlog("L_INFO", "Call from provider GW : Source IP allowed\n"); # source IP allowed
            xlog("L_INFO", " return \n");
            return;
        }
    }

    # 3- message from a registred gateway
    xlog("L_INFO", "Credential Auth provider ...\n");
    if(route(MSG_RECV_EXTERNAL)) {
        if((!is_method("REGISTER")) && uac_reg_lookup("$rU", "$ru")) {
            xlog("L_INFO", "Set flag FLAG_FROM_PROVIDER\n");
            setflag(FLAG_FROM_PROV);
            xlog("L_INFO", " request from a remote SIP provider [$rU => $tU]\n");
            ## si URI not DID : $tU in $rU
            $rU = $tU;
            xlog("L_INFO", " request from a remote SIP provider [$rU => $tU]\n");
            xlog("L_INFO", " return \n");
            return;
        }
    }

    # 4- check credential auth
    xlog("L_INFO", "Credential Auth customer ...\n");
    if(route(MSG_RECV_INTERNAL) && (is_method("REGISTER") || uri==myself)) {
        # authenticate requests
        if (!auth_check("$fd", "subscriber", "3")) {
            switch ($retcode) {
                case -1:
                    xlog("L_WARN", "auth failed - code -1 generic error - src ip: $si\n");
                    t_reply("403", "Forbidden");
                    exit;
                case -2:
                    xlog("L_WARN", "auth failed - code -2 invalid password - src ip: $si\n");
                    t_reply("500", "Internal Server Error");
                    exit;
                case -3:
                    xlog("L_WARN", "auth failed - code -3 invalid user - src ip: $si\n");
                    sl_send_reply("400", "Bad Request");
                    exit;
                case -4:
                    xlog("L_WARN", "auth failed - code -4 nonce exprired - src ip: $si\n");
                    break;
                case -5:
                    xlog("L_WARN", "auth failed - code -5 no credentials - src ip: $si\n");
                    break;
                case -6:
                    xlog("L_WARN", "auth failed - code -6 nonce reused - src ip: $si\n");
                    break;
                case -8:
                    xlog("L_WARN", "auth failed - code -8 authuser mismatch - src ip: $si\n");
                    break;
            }

            xlog("L_INFO", "Send auth challenge\n");

            # challenges for authentication by sending 401 for REGISTER and 407 for the other SIP requests
            auth_challenge("$fd", "1");
            xlog("L_INFO", "stop|----------------------------\n");
            exit;
        }

        xlog("L_INFO", "Set flag FLAG_FROM_CUSTOMER\n");
        setflag(FLAG_FROM_CUST);
        xlog("L_INFO", "User authenticated\n");
        # user authenticated - remove auth header

        if(!is_method("REGISTER|PUBLISH")){
            xlog("L_INFO", "User authenticated - not method REGISTER|PUBLISH\n");
            xlog("L_INFO", "User authenticated - remove auth header\n");
            xlog("L_INFO", "X-PyFB-AccountId: $au\n");
            $var(sipaccount) = "" + $au; # force the var to be a string
            append_hf("X-PyFB-AccountId: $au\r\n");
            consume_credentials();
        }
        return;
    }


    # if caller is not local subscriber, then check if it calls
    # a local destination, otherwise deny, not an open relay here
    if (from_uri!=myself && uri!=myself) {
        xlog("L_INFO", " Message for another relay -> not allowed - END 403\n");
        xlog("L_INFO", "stop|----------------------------\n");
        sl_send_reply("403","Not relaying");
        exit;
    }

    xlog("L_WARN", " Auth failed \n");
    exit;
}

# Get customer and endpoint infos to check authorization
route[AUTORIZATION] {
    # Only calls from customer for now
    if(isflagset(FLAG_FROM_PROV)) {
        # xlog("L_INFO", "From provider : Drop\n");
        # sl_send_reply("404","Not implemented yet");
        return;
    }

    if (sql_xquery("ca", "SELECT e.id AS customer_endpoint_id, e.max_calls AS e_max_calls, e.calls_per_second AS e_cps, outbound_caller_id_name, outbound_caller_id_number, force_caller_id, masq_caller_id, pai, pid, ppi, transcoding_allowed, recording_allowed, recording_always, customer_id, cli_debug, CAST((credit_limit * 1000000) AS INTEGER) AS credit_limit, c.max_calls AS c_max_calls, c.calls_per_second AS c_cps, customer_enabled, CAST((customer_balance * 1000000) AS INTEGER) AS balance FROM pyfb_endpoint_customer e JOIN pyfb_customer c ON c.id = e.customer_id JOIN pyfb_company co ON co.id = c.company_id WHERE e.name = $(var(sipaccount){sql.val.str}) ;", "ra") == 1 )
    {
        // customer_enabled, company_id, customer_balance
        $dlg_var(customer_endpoint_id) = $xavp(ra=>customer_endpoint_id);
        xlog("L_INFO", "customer endpoint id : $dlg_var(customer_endpoint_id)\n");
        $dlg_var(customer_id) = $xavp(ra=>customer_id);
        xlog("L_INFO", "customer id : $dlg_var(customer_id)\n");
        $var(customer_enabled) = $xavp(ra=>customer_enabled);
        xlog("L_INFO", "Is customer enabled ? : $var(customer_enabled)\n");
        // If customer is disabled, end of call
        if ($var(customer_enabled) == 0) {
            pv_unset("$xavp(ra)");
            xlog("L_WARN", " customer account disabled - END 403\n");
            xlog("L_INFO", "stop|----------------------------\n");
            sl_send_reply("403","Authorization failed - customer account disabled");
            exit;
        }
        $var(credit_limit) = $xavp(ra=>credit_limit);
        xlog("L_INFO", "customer credit limit : $var(credit_limit)\n");
        $var(balance) = $xavp(ra=>balance);
        xlog("L_INFO", "customer balance : $var(balance)\n");
        // If balance < credit_limit, end of call
        if ($var(balance) < $var(credit_limit) && route(MSG_RECV_INTERNAL)) {
            pv_unset("$xavp(ra)");
            xlog("L_WARN", " customer balance < credit limit - END 403\n");
            xlog("L_INFO", "stop|----------------------------\n");
            sl_send_reply("402","Authorization failed - low balance");
            exit;
        }
        $var(c_max_calls) = $xavp(ra=>c_max_calls);
        xlog("L_INFO", "customer max calls limit : $var(c_max_calls)\n");
        $var(c_cps) = $xavp(ra=>c_cps);
        xlog("L_INFO", "customer max calls limit : $var(c_cps)\n");
        $var(e_max_calls) = $xavp(ra=>e_max_calls);
        xlog("L_INFO", "endpoint max calls limit : $var(e_max_calls)\n");
        $var(e_cps) = $xavp(ra=>e_cps);
        xlog("L_INFO", "endpoint max calls limit : $var(e_cps)\n");

        route(LIMIT_CALLS);

        $var(outbound_caller_id_name) = $xavp(ra=>outbound_caller_id_name);
        xlog("L_INFO", "outbound_caller_id_name : $var(outbound_caller_id_name)\n");
        $var(outbound_caller_id_number) = $xavp(ra=>outbound_caller_id_number);
        xlog("L_INFO", "outbound_caller_id_number : $var(outbound_caller_id_number)\n");
        $var(force_caller_id) = $xavp(ra=>force_caller_id);
        xlog("L_INFO", "force_caller_id : $var(force_caller_id)\n");
        $var(masq_caller_id) = $xavp(ra=>masq_caller_id);
        xlog("L_INFO", "masq_caller_id : $var(masq_caller_id)\n");
        $var(pai) = $xavp(ra=>pai);
        xlog("L_INFO", "add PAI ? : $var(pai)\n");
        $var(ppi) = $xavp(ra=>ppi);
        xlog("L_INFO", "add PPI ? : $var(ppi)\n");
        $var(pid) = $xavp(ra=>pid);
        xlog("L_INFO", "add PID ? : $var(pid)\n");
        $var(transcoding_allowed) = $xavp(ra=>transcoding_allowed);
        xlog("L_INFO", "transcoding_allowed : $var(transcoding_allowed)\n");
        $var(recording_allowed) = $xavp(ra=>recording_allowed);
        xlog("L_INFO", "recording_allowed : $var(recording_allowed)\n");
        $var(recording_always) = $xavp(ra=>recording_always);
        xlog("L_INFO", "recording_always : $var(recording_always)\n");


        pv_unset("$xavp(ra)");
        return;
    } else {
        pv_unset("$xavp(ra)");
        sl_send_reply("403","Authorization failed");
        exit;
    }
}

#-------------
