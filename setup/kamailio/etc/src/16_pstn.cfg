
#-------------
#-------------
## 16_pstn.cfg

# PSTN GW routing
route[PSTN] {
    xlog("L_INFO", "--PSTN--\n");
    # Only calls from customer
    if(isflagset(FLAG_FROM_PROV)) {
        xlog("L_INFO", "From provider : Drop\n");
        sl_send_reply("404","Not implemented yet");
        exit;
    }

    # Clean CallerID and related headers
    route(REMOVEPLUS);
    route(REMOVEPAI);
    route(REMOVERPID);

    # Normalize Callee and Caller numbers
    route(NORMALIZATION);

    # Set dialog vars
    //$dlg_var(customer_id) = '1'; #$var(sipaccount); #'1';
    $dlg_var(caller_number) = $avp(s:callernum);
    $dlg_var(called_number) = $rU;
    $dlg_var(direction) = "outbound";
    $dlg_var(rtpe) = $avp(setid);

    # Set privacy
    #ToDo

    # Get outbound route
    route(PSTN_GET_ROUTE);

}

route[PSTN_GET_ROUTE] {
    xlog("L_INFO", "--PSTN_GET_ROUTE--\n");

    # create a transaction to be paused, and resumed in route[HTTP_REPLY]
    t_newtran();

    # Get routes informations
    xlog("L_INFO", "Async query to API4 : outboundroutes\n");
    http_async_query("http://MY_ROUTER_ADDRESS:MY_ROUTER_PORT/v1/outboundroute?socket=MY_IP_ADDRESS_EXTERNAL&r_uri=$dlg_var(called_number)&f_uri=$dlg_var(caller_number)&customer_id=$dlg_var(customer_id)", "PSTN_HTTP_REPLY");

}

route[PSTN_HTTP_REPLY] {
    if ($http_ok) {
        xlog("L_INFO", "route[HTTP_REPLY]: status $http_rs\n");
        xlog("L_INFO", "route[HTTP_REPLY]: body   $http_rb\n");
    } else {
        xlog("L_INFO", "route[HTTP_REPLY]: error  $http_err)\n");
    }

    //Get all response for cdr
    jansson_get("", $http_rb, "$dlg_var(route_json)");
    jansson_get("[0]", $http_rb, "$var(route_json)");
    xlog("L_INFO", "route_json : $var(route_json)--\n");

    // Get ratecard_id - as integer, need to use and intermediate var
    jansson_get("rate.ratecard_id", $http_rb, "$var(ratecard_id)");
    $dlg_var(ratecard_id) = $var(ratecard_id);
    xlog("L_INFO", "ratecard_id : $dlg_var(ratecard_id)--\n");
    jansson_get("rate.rate", $http_rb, "$var(rate)");
    $dlg_var(rate) = $var(rate);
    jansson_get("rate.block_min_duration", $http_rb, "$var(block_min_duration)");
    $dlg_var(block_min_duration) = $var(block_min_duration);
    jansson_get("rate.minimal_time", $http_rb, "$var(minimal_time)");
    $dlg_var(minimal_time) = $var(minimal_time);
    jansson_get("rate.init_block", $http_rb, "$var(init_block)");
    $dlg_var(init_block) = $var(init_block);

    rtjson_init_routes("$http_rb");
    rtjson_push_routes();
    t_on_branch("MANAGE_BRANCH");
    t_on_failure("MANAGE_FAILURE");
    route(RELAY);
    exit;
}

#-------------
