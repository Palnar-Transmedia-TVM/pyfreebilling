
#-------------
#-------------
## 14_auth.cfg

# Authorization and authentication
# First determine the origini of the call based on IP address :
# 1- from customer
# 2- from provider IP Auth
# 3- From provider - registred gateway
# 4- from customer et REGISTER message
#
# The second step is to determine is the sip user is registred (Not for the POC)
route[AUTH] {
    xlog("L_INFO", "--AUTH-\n");
    xlog("L_INFO", " Starting auth process ...\n");

    xlog("L_INFO", "IP Auth process ...\n");

    # 1- message fom customer
    xlog("L_INFO", "IP Auth customer ...\n");
    if(route(MSG_RECV_INTERNAL)) {
        if((!is_method("REGISTER")) && allow_source_address(TRUSTED_ADR_GR_CUST)) {
            xlog("L_INFO", "Set flag FLAG_FROM_CUSTOMER\n");
            setflag(FLAG_FROM_CUST);
            $var(sipaccount) = $avp(s:sipacid);
            append_hf("X-PyFB-AccountId: $avp(s:sipacid)\r\n");
            xlog("L_INFO", "Call from customer : Source IP allowed - sipaccount : $avp(s:sipacid)\n"); # source IP allowed
            xlog("L_INFO", " return \n");
            return;
        }
    }

    # 2- message from provider
    xlog("L_INFO", "IP Auth provider ...\n");
    if(route(MSG_RECV_EXTERNAL)) {
        if((!is_method("REGISTER")) && allow_source_address(TRUSTED_ADR_GR_GW)) {
            xlog("L_INFO", "Set flag FLAG_FROM_PROVIDER\n");
            setflag(FLAG_FROM_PROV);
            xlog("L_INFO", "Call from provider GW : Source IP allowed\n"); # source IP allowed
            xlog("L_INFO", " return \n");
            return;
        }
    }

    # 3- message from a registred gateway
### A TERMINER
    xlog("L_INFO", "Credential Auth provider ...\n");
    if(route(MSG_RECV_EXTERNAL)) {
        if((!is_method("REGISTER")) && uac_reg_lookup("$rU", "$ru")) {
            xlog("L_INFO", "Set flag FLAG_FROM_PROVIDER\n");
            setflag(FLAG_FROM_PROV);
            xlog("L_INFO", " request from a remote SIP provider [$rU => $tU]\n");
            ## si URI not DID : $tU in $rU
            $rU = $tU;
            xlog("L_INFO", " request from a remote SIP provider [$rU => $tU]\n");
            xlog("L_INFO", " return \n");
            return;
        }
    }

    # 4- check credential auth
    xlog("L_INFO", "Credential Auth customer ...\n");
    if(route(MSG_RECV_INTERNAL) && (is_method("REGISTER") || uri==myself)) {
        # authenticate requests
        if (!auth_check("$fd", "subscriber", "3")) {
            switch ($retcode) {
                case -1:
                    xlog("L_WARN", "auth failed - code -1 generic error - src ip: $si\n");
                    t_reply("403", "Forbidden");
                    exit;
                case -2:
                    xlog("L_WARN", "auth failed - code -2 invalid password - src ip: $si\n");
                    t_reply("500", "Internal Server Error");
                    exit;
                case -3:
                    xlog("L_WARN", "auth failed - code -3 invalid user - src ip: $si\n");
                    sl_send_reply("400", "Bad Request");
                    exit;
                case -4:
                    xlog("L_WARN", "auth failed - code -4 nonce exprired - src ip: $si\n");
                    break;
                case -5:
                    xlog("L_WARN", "auth failed - code -5 no credentials - src ip: $si\n");
                    break;
                case -6:
                    xlog("L_WARN", "auth failed - code -6 nonce reused - src ip: $si\n");
                    break;
                case -8:
                    xlog("L_WARN", "auth failed - code -8 authuser mismatch - src ip: $si\n");
                    break;
            }

            xlog("L_INFO", "Send auth challenge\n");

            # challenges for authentication by sending 401 for REGISTER and 407 for the other SIP requests
            auth_challenge("$fd", "1");
            xlog("L_INFO", "stop|----------------------------\n");
            exit;
        }

        xlog("L_INFO", "Set flag FLAG_FROM_CUSTOMER\n");
        setflag(FLAG_FROM_CUST);
        xlog("L_INFO", "User authenticated\n");
        # user authenticated - remove auth header

        if(!is_method("REGISTER|PUBLISH")){
            xlog("L_INFO", "User authenticated - not method REGISTER|PUBLISH\n");
            xlog("L_INFO", "User authenticated - remove auth header\n");
            xlog("L_INFO", "X-PyFB-AccountId: $au\n");
            $var(sipaccount) = $au;
            append_hf("X-PyFB-AccountId: $au\r\n");
            consume_credentials();
        }
    }


    # if caller is not local subscriber, then check if it calls
    # a local destination, otherwise deny, not an open relay here
    if (from_uri!=myself && uri!=myself) {
        xlog("L_INFO", " Message for another relay -> not allowed - END 403\n");
        xlog("L_INFO", "stop|----------------------------\n");
        sl_send_reply("403","Not relaying");
        exit;
    }

    xlog("L_INFO", " return \n");
    return;
}

#-------------
