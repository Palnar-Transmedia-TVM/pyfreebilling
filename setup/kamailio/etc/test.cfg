#!KAMAILIO
#
# Kamailio (OpenSER) SIP Server v3.3 - default configuration script
#     - web: http://www.kamailio.org
#     - git: http://sip-router.org
#
# Direct your questions about this file to: <sr-users@lists.sip-router.org>
#
# Refer to the Core CookBook at http://www.kamailio.org/dokuwiki/doku.php
# for an explanation of possible statements, functions and parameters.
#
# Several features can be enabled using '#!define WITH_FEATURE' directives:
#
# *** To run in debug mode:
#     - define WITH_DEBUG
#
# *** To enable mysql:
#     - define WITH_MYSQL

#!define WITH_MYSQL

# *** To enable authentication execute:
#     - enable mysql
#     - define WITH_AUTH
#     - add users using 'kamctl'

#!define WITH_AUTH

# *** To enable IP authentication execute:
#     - enable mysql
#     - enable authentication
#     - define WITH_IPAUTH
#     - add IP addresses with group id '1' to 'address' table

#!define WITH_IPAUTH

# *** To enable persistent user location execute:
#     - enable mysql
#     - define WITH_USRLOCDB

#!define WITH_USRLOCDB

# *** To enable presence server execute:
#     - enable mysql
#     - define WITH_PRESENCE

#!define WITH_PRESENCE

# *** To enable nat traversal execute:
#     - define WITH_NAT
#     - install RTPProxy: http://www.rtpproxy.org
#     - start RTPProxy:
#        rtpproxy -l _your_public_ip_ -s udp:localhost:7722

#!define WITH_NAT

# *** To enable PSTN gateway routing execute:
#     - define WITH_PSTN
#     - set the value of pstn.gw_ip
#     - check route[PSTN] for regexp routing condition

# *** To enable database aliases lookup execute:
#     - enable mysql
#     - define WITH_ALIASDB

#!define WITH_ALIASDB

# *** To enable speed dial lookup execute:
#     - enable mysql
#     - define WITH_SPEEDDIAL

# *** To enable multi-domain support execute:
#     - enable mysql
#     - define WITH_MULTIDOMAIN
#
# *** To enable TLS support execute:
#     - adjust CFGDIR/tls.cfg as needed
#     - define WITH_TLS

##!define WITH_TLS

# *** To enable XMLRPC support execute:
#     - define WITH_XMLRPC
#     - adjust route[XMLRPC] for access policy

#!define WITH_XMLRPC

# *** To enable anti-flood detection execute:
#     - adjust pike and htable=>ipban settings as needed (default is
#       block if more than 16 requests in 2 seconds and ban for 300 seconds)
#     - define WITH_ANTIFLOOD

#!define WITH_ANTIFLOOD

# *** To block 3XX redirect replies execute:
#     - define WITH_BLOCK3XX

# *** To enable VoiceMail routing execute:
#     - define WITH_VOICEMAIL
#     - set the value of voicemail.srv_ip
#     - adjust the value of voicemail.srv_port

#!define WITH_VOICEMAIL

# *** To enhance accounting execute:
#     - enable mysql
#     - define WITH_ACCDB
#     - add following columns to database

#!define WITH_ACCDB

#!ifdef ACCDB_COMMENT
  ALTER TABLE acc ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN src_ip varchar(64) NOT NULL default '';
  ALTER TABLE acc ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN src_ip varchar(64) NOT NULL default '';
  ALTER TABLE missed_calls ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';
#!endif

####### Defined Values #########

# *** Value defines - IDs used later in config
#!ifdef WITH_MYSQL
# - database URL - used to connect to database server by modules such
#       as: auth_db, acc, usrloc, a.s.o.
#!define DBURL "mysql://openser:openserrw@localhost/openser"
#!endif
#!ifdef WITH_MULTIDOMAIN
# - the value for 'use_domain' parameters
#!define MULTIDOMAIN 1
#!else
#!define MULTIDOMAIN 0
#!endif

# - flags
#   FLT_ - per transaction (message) flags
#	FLB_ - per branch flags
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5

#!define FLB_NATB 6
#!define FLB_NATSIPPING 7

####### Global Parameters #########

#!ifdef WITH_DEBUG
debug=4
log_stderror=yes
#!else
debug=4
log_stderror=no
#!endif

memdbg=5
memlog=5

log_facility=LOG_LOCAL0

fork=yes
children=4

/* uncomment the next line to disable TCP (default on) */
#disable_tcp=yes

/* uncomment the next line to disable the auto discovery of local aliases
   based on reverse DNS on IPs (default on) */
#auto_aliases=no

/* add local domain aliases */
alias="pisco.pocos.nl"

/* uncomment and configure the following line if you want Kamailio to
   bind on a specific interface/port/proto (default bind on all available) */
listen=udp:109.235.32.42:5060
listen=udp:109.235.32.42:5062
listen=tcp:109.235.32.42:5060
listen=tcp:109.235.32.42:5062
listen=tls:109.235.32.42:5061

/* port to listen to
 * - can be specified more than once if needed to listen on many ports */
port=5060

#!ifdef WITH_TLS
enable_tls=yes
#!endif

# life time of TCP connection when there is no traffic
# - a bit higher than registration expires to cope with UA behind NAT
tcp_connection_lifetime=3605

####### Custom Parameters #########

server_signature=no

# These parameters can be modified runtime via RPC interface
# - see the documentation of 'cfg_rpc' module.
#
# Format: group.id = value 'desc' description
# Access: $sel(cfg_get.group.id) or @cfg_get.group.id
#

#!ifdef WITH_PSTN
# PSTN GW Routing
#
# - pstn.gw_ip: valid IP or hostname as string value, example:
pstn.gw_ip = "109.235.32.36" desc "My PSTN GW Address"
#
# - by default is empty to avoid misrouting
#pstn.gw_ip = "" desc "PSTN GW Address"
#!endif

#!ifdef WITH_VOICEMAIL
# VoiceMail Routing on offline, busy or no answer
#
# - by default Voicemail server IP is empty to avoid misrouting
voicemail.srv_ip = "109.235.32.41" desc "VoiceMail IP Address"
voicemail.srv_port = "5060" desc "VoiceMail Port"
#!endif

####### Modules Section ########

# set paths to location of modules (to sources or installation folders)
#!ifdef WITH_SRCPATH
mpath="modules_k:modules"
#!else
mpath="/usr/lib64/kamailio/modules_k/:/usr/lib64/kamailio/modules/"
#!endif

#!ifdef WITH_MYSQL
loadmodule "db_mysql.so"
#!endif

loadmodule "mi_fifo.so"
loadmodule "kex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "textopsx.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "mi_rpc.so"
loadmodule "acc.so"

loadmodule "uac.so"
loadmodule "uac_redirect.so"
loadmodule "avpops.so"

#!ifdef WITH_AUTH
loadmodule "auth.so"
loadmodule "auth_db.so"
#!ifdef WITH_IPAUTH
loadmodule "permissions.so"
#!endif
#!endif

#!ifdef WITH_ALIASDB
loadmodule "alias_db.so"
#!endif

#!ifdef WITH_SPEEDDIAL
loadmodule "speeddial.so"
#!endif

#!ifdef WITH_MULTIDOMAIN
loadmodule "domain.so"
#!endif

#!ifdef WITH_PRESENCE
loadmodule "presence.so"
loadmodule "presence_xml.so"
#!endif

#!ifdef WITH_NAT
loadmodule "nathelper.so"
loadmodule "rtpproxy.so"
#!endif

#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif

#!ifdef WITH_ANTIFLOOD
loadmodule "htable.so"
loadmodule "pike.so"
#!endif

#!ifdef WITH_XMLRPC
loadmodule "xmlrpc.so"
#!endif

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

loadmodule "topoh.so"

loadmodule "regex.so"

loadmodule "dispatcher.so"

loadmodule "dialog.so"

# ----------------- setting module-specific parameters ---------------
modparam("uac","restore_mode","manual")
modparam("uac","restore_from_avp","$avp(s:original_uri_from)")
modparam("uac","restore_to_avp","$avp(s:original_uri_to)")

#modparam("uac_redirect","default_filter","deny")

modparam("dispatcher", "db_url", DBURL)
modparam("dispatcher", "table_name", "dispatcher")
modparam("dispatcher", "flags", 2)
modparam("dispatcher", "dst_avp", "$avp(AVP_DST)")
modparam("dispatcher", "grp_avp", "$avp(AVP_GRP)")
modparam("dispatcher", "cnt_avp", "$avp(AVP_CNT)")
modparam("dispatcher", "ds_ping_method", "OPTIONS");
modparam("dispatcher", "ds_ping_interval", 15);
modparam("dispatcher", "ds_probing_mode", 1);
modparam("dispatcher", "ds_ping_from", "sip:pisco@109.235.32.40");


modparam("avpops","db_url",DBURL)
modparam("avpops","avp_table","usr_preferences")

modparam("topoh", "mask_key", "RgAHWKYplr1lE")
modparam("topoh", "mask_ip", "172.19.162.1")
modparam("topoh", "uparam_prefix", "pcs-")
modparam("topoh", "vparam_prefix", "pocos-")
modparam("topoh", "sanity_checks", 1)
modparam("topoh", "mask_callid", 1)

# ----- mi_fifo params -----
modparam("mi_fifo", "fifo_name", "/tmp/kamailio_fifo")


# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)
modparam("tm", "noisy_ctimer", 1)


# ----- rr params -----
# add value to ;lr param to cope with most of the UAs
modparam("rr", "enable_full_lr", 1)
## do not append from tag to the RR (no need for this script)
#modparam("rr", "append_fromtag", 0)
modparam("rr", "append_fromtag", 1)


# ----- registrar params -----
modparam("registrar", "method_filtering", 1)
/* uncomment the next line to disable parallel forking via location */
# modparam("registrar", "append_branches", 0)
/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)
# max value for expires of registrations
modparam("registrar", "max_expires", 3600)
# set it to 1 to enable GRUU
modparam("registrar", "gruu_enabled", 0)

modparam("registrar", "min_expires", 60)
modparam("registrar", "default_expires", 600)
modparam("registrar", "max_expires", 7200)


# ----- acc params -----
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_ack", 1)
modparam("acc", "report_cancels", 1)
/* by default ww do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure the enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)
/* account triggers (flags) */
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "log_extra",
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)
/* enhanced DB accounting */
#!ifdef WITH_ACCDB
modparam("acc", "db_flag", FLT_ACC)
modparam("acc", "db_missed_flag", FLT_ACCMISSED)
modparam("acc", "db_url", DBURL)
modparam("acc", "db_extra",
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
#!endif


# ----- usrloc params -----
/* enable DB persistency for location entries */
#!ifdef WITH_USRLOCDB
modparam("usrloc", "db_url", DBURL)
modparam("usrloc", "db_mode", 2)
modparam("usrloc", "use_domain", MULTIDOMAIN)
#!endif


# ----- auth_db params -----
#!ifdef WITH_AUTH
modparam("auth_db", "db_url", DBURL)
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "load_credentials", "")
modparam("auth_db", "use_domain", MULTIDOMAIN)

# ----- permissions params -----
#!ifdef WITH_IPAUTH
modparam("permissions", "db_url", DBURL)
modparam("permissions", "db_mode", 0)
#!endif

#!endif


# ----- alias_db params -----
#!ifdef WITH_ALIASDB
modparam("alias_db", "db_url", DBURL)
modparam("alias_db", "use_domain", MULTIDOMAIN)
#!endif


# ----- speedial params -----
#!ifdef WITH_SPEEDDIAL
modparam("speeddial", "db_url", DBURL)
modparam("speeddial", "use_domain", MULTIDOMAIN)
#!endif


# ----- domain params -----
#!ifdef WITH_MULTIDOMAIN
modparam("domain", "db_url", DBURL)
# register callback to match myself condition with domains list
modparam("domain", "register_myself", 1)
#!endif


#!ifdef WITH_PRESENCE
# ----- presence params -----
modparam("presence", "db_url", DBURL)

# ----- presence_xml params -----
modparam("presence_xml", "db_url", DBURL)
modparam("presence_xml", "force_active", 1)
#!endif


#!ifdef WITH_NAT
# ----- rtpproxy params -----
modparam("rtpproxy", "rtpproxy_sock", "udp:127.0.0.1:7722")

# ----- nathelper params -----
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:sipping@pocos.nl")

# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)
#!endif


#!ifdef WITH_TLS
# ----- tls params -----
modparam("tls", "config", "/etc/kamailio/tls.cfg")
#!endif

#!ifdef WITH_ANTIFLOOD
# ----- pike params -----
modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 16)
modparam("pike", "remove_latency", 4)

# ----- htable params -----
# ip ban htable with autoexpire after 5 minutes
modparam("htable", "htable", "ipban=>size=8;autoexpire=300;")
#!endif

#!ifdef WITH_XMLRPC
# ----- xmlrpc params -----
modparam("xmlrpc", "route", "XMLRPC");
modparam("xmlrpc", "url_match", "^/RPC")
#!endif

#!ifdef WITH_DEBUG
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
#!endif

modparam("dialog","dlg_flag",4)
modparam("dialog","hash_size",4096)
modparam("dialog","enable_stats",1)
modparam("dialog","db_url",DBURL)
modparam("dialog","db_mode", 2)
modparam("dialog","db_update_period", 15)
modparam("dialog","profiles_with_value","channelsinbound;channelsoutbound")
modparam("dialog","profiles_no_value", "all")
modparam("dialog","dlg_match_mode", 1)
modparam("dialog","send_bye", 1)
modparam("dialog","default_timeout", 43200)
modparam("dialog","ka_timer", 45)
modparam("dialog","ka_interval", 45)



####### Routing Logic ########


# Main SIP request routing logic
# - processing of any incoming SIP request starts with this route
# - note: this is the same as route { ... }
request_route {

	# per request initial checks
	route(REQINIT);

	# NAT detection
	route(NATDETECT);

	# CANCEL processing
	if (is_method("CANCEL"))
	{
		route(DIALOG);

		if (t_check_trans())
		{
			t_relay();
		}

		exit;
	}

	# handle requests within SIP dialogs
	route(WITHINDLG);

	### only initial requests (no To tag)

	t_check_trans();

	# authentication
	route(AUTH);

	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE"))
	{
		record_route();
	}

	# account only INVITEs
	if (is_method("INVITE"))
	{
		setflag(FLT_ACC); # do accounting
	}

	if(is_method("INVITE") && !allow_source_address("1"))
	{
		route(AUTHENTICATE);
		route(CALLERID);
	}

	if($rU=~"%23$")
	{
		# %23==#, should be stripped from dst
		strip_tail(3);
	}

	if($rU=~"^[^1][^3][^2][0-9]+$" && $avp(src_clir))
	{
		prefix('131');
	}

	if($rU=~"^1[23][0-9]+$" || $rU=~"\*[0-9]+")
	{
		route(SPECIALNUMBERS);
	}

	if($rU=~"^[2-8][0-9]+$")
	{
		route("AREACODE");
	}

	if($rU=~"^00[1-9][0-9]+$")
	{
		strip(2);
		prefix("+");
	}

	if($rU=~"^0[1-9][0-9]+$")
	{
		strip(1);
		prefix("+31");
	}

#	if($rU=~"\+?[^0-9]")
#	{
#		send_reply("478","Invalid destination");
#		exit;
#	}

	if(is_method("INVITE") && !allow_source_address("1"))
	{
		route(CALLBARRING);
	}


	if (is_method("INVITE"))
	{
		$avp(callednumber)=$rU;

		# search in DB-based aliases
		if(!lookup("location"))
		{
			if(!alias_db_lookup("dbaliases"))
			{
				strip_tail(1);

				if(!alias_db_lookup("dbaliases"))
				{
					strip_tail(1);
					if(!alias_db_lookup("dbaliases"))
					{
						strip_tail(1);
						if(!alias_db_lookup("dbaliases"))
						{
							strip_tail(1);
							if(!alias_db_lookup("dbaliases"))
							{
								$rU=$avp(callednumber);
							}
						}
					}
				}

			}
		}

		route(ATTRIBUTEDST);

		xlog("src_accountcode	: $avp(src_accountcode)");
		xlog("src_areacode	: $avp(src_areacode)");
		xlog("src_callerid	: $avp(src_callerid)");
		xlog("src_clir		: $avp(src_clir	)");
		xlog("src_dispatcher	: $avp(src_dispatcher)");
		xlog("src_numberformat	: $avp(src_numberformat)");
		xlog("src_voicemail	: $avp(src_voicemail)");
		xlog("src_redirectnumber: $avp(src_redirectnumber)");
		xlog("src_maxchannels   : $avp(src_maxchannels)");
		xlog("dst_accountcode	: $avp(dst_accountcode)");
		xlog("dst_numberformat	: $avp(dst_numberformat)");
		xlog("dst_voicemail	: $avp(dst_voicemail)");
		xlog("dst_rewriterurito	: $avp(dst_rewriterurito)");
		xlog("dst_redirectnumber: $avp(dst_redirectnumber)");
		xlog("dst_redirecttimeout: $avp(dst_redirecttimeout)");
		xlog("dst_maxchannels   : $avp(dst_maxchannels)");

		if($avp(dst_redirecttimeout) && $avp(dst_redirectnumber))
		{
			t_set_fr(20000);
		}
		else
		{
			route(CALLREDIRECT);
		}

		if($avp(dst_voicemail))
		{
			t_set_fr(20000);
		}

	}

	route(DIALOG);

	remove_hf("P-Asserted-Identity");
	remove_hf("P-Preferred-Identity");
	remove_hf("Remote-Party-ID");

	if(is_method("INVITE") && lookup("location"))
	{
		setflag(FLT_ACCMISSED);

		if($avp(dst_voicemail))
		{
			t_set_fr(20000);
		}

		route(RELAY);
	}


	# dispatch requests to foreign domains
	route(SIPOUT);

	### requests for my local domains

	# handle presence related requests
	route(PRESENCE);

	# handle registrations
	route(REGISTRAR);

	if ($rU==$null)
	{
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}


	# user location service
	route(LOCATION);

	if(is_method("INVITE") && !allow_source_address("1"))
	{
		route(AUTHENTICATE);

		remove_hf("X-accountcode");

		route(CALLERID);
		route(ACCOUNTCODE);
		route(CONTEXT);

		append_hf("P-Asserted-Identity: <sip:$avp(s:assertedid)@$fd>\r\n");
		append_hf("X-ANI: $avp(s:assertedid)\r\n");
	}

	if(allow_source_address("1") && !search_hf("X-accountcode", "^[0-9]+", "a"))
	{
		t_reply("404","Not relaying");
		exit;
	}

	route(DISPATCHER);

	route(RELAY);
}


route[RELAY] {
	if (is_method("INVITE")) {
		route(BUGFIXES);

		xlog("old: rU:[$rU] tU:[$tU] fU:[$fU] fn:[$fn] tn:[$tn]");

		if($avp(dst_numberformat)=="int+")
		{
			route(INTERNATIONALPLUS);
		}
		else if($avp(dst_numberformat)=="int")
		{
			route(INTERNATIONAL);
		}
		else if($avp(dst_numberformat)=="nat")
		{
			route(NATIONAL);
		}

		xlog("new: rU:[$rU] tU:[$tU] fU:[$fU] fn:[$fn] tn:[$tn]");
	}

	if($avp(uacreplacefromdisplay) && $avp(uacreplacefromuri))
	{
		uac_replace_from("$avp(uacfromdisplay)","$avp(uacfromuri)");
	}
	else
	{
		if($avp(uacreplacefromdisplay))
		{
			uac_replace_from("$avp(uacfromdisplay)","");
		}
		if($avp(uacreplacefromuri))
		{
			uac_replace_from("$avp(uacfromuri)");
		}
	}

	if($avp(uacreplacetodisplay) && $avp(uacreplacetouri))
	{
		uac_replace_to("$avp(uactodisplay)","$avp(uactouri)");
	}
	else
	{
		if($avp(uacreplacetodisplay))
		{
			uac_replace_to("$avp(uactodisplay)","");
		}
		if($avp(uacreplacetouri))
		{
			uac_replace_to("$avp(uactouri)");
		}
	}

	route(STRIPHEADERS);

	# enable additional event routes for forwarded requests
	# - serial forking, RTP relaying handling, a.s.o.
	if (is_method("INVITE|SUBSCRIBE")) {
		t_on_branch("MANAGE_BRANCH");
		t_on_reply("MANAGE_REPLY");
	}
	if (is_method("INVITE")) {
		t_on_failure("MANAGE_FAILURE");
	}

	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}

# Per SIP request initial checks
route[REQINIT] {
#!ifdef WITH_ANTIFLOOD
	# flood dection from same IP and traffic ban for a while
	# be sure you exclude checking trusted peers, such as pstn gateways
	# - local host excluded (e.g., loop to self)
	if(src_ip!=myself && !allow_source_address("1"))
	{
		if($sht(ipban=>$si)!=$null)
		{
			# ip is already blocked
			xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
			exit;
		}
		if (!pike_check_req())
		{
			xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
			$sht(ipban=>$si) = 1;
			exit;
		}
	}
#!endif

	#scout sip check.
	if($si=="109.235.32.70" && is_method("OPTIONS"))
	{
		sl_send_reply("200","Up and running");
		exit;
	}

	if(is_method("OPTIONS"))
	{
		sl_send_reply("200","Up and running");
		exit;
	}

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(!sanity_check("1511", "7"))
	{
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}

}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (has_totag()) {
		# sequential request withing a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
			route(DLGURI);
			if (is_method("BYE")) {
				route(DIALOG);

				setflag(FLT_ACC); # do accounting ...
				setflag(FLT_ACCFAILED); # ... even if the transaction fails
			}
			else if ( is_method("ACK") ) {
				# ACK is forwarded statelessy
				route(NATMANAGE);
			}
			else if ( is_method("NOTIFY") ) {
				# Add Record-Route for in-dialog NOTIFY as per RFC 6665.
				record_route();
			}
			else if ( is_method("REFER") ) {
				route(AUTHENTICATE);
				if($avp(src_accountcode))
				{
					append_hf("X-accountcode: $avp(src_accountcode)\r\n");
				}
				else
				{
					send_reply("404", "Not Found - not authorized");
					exit;
				}
			}

			route(RELAY);
		} else {
			route(DIALOG);
			if (is_method("SUBSCRIBE") && uri == myself) {
				# in-dialog subscribe requests
				route(PRESENCE);
				exit;
			}
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# no loose-route, but stateful ACK;
					# must be an ACK after a 487
					# or e.g. 404 from upstream server
					t_relay();
					exit;
				} else {
					# ACK without matching transaction ... ignore and discard
					exit;
				}
			}
			t_reply("404","Not here");
		}
		exit;
	}
}

# Handle SIP registrations
route[REGISTRAR] {
	if (is_method("REGISTER"))
	{
		if(isflagset(FLT_NATS))
		{
			setbflag(FLB_NATB);
			# uncomment next line to do SIP NAT pinging
			setbflag(FLB_NATSIPPING);
		}
		if (!save("location"))
			sl_reply_error();

		exit;
	}
}

# USER location service
route[LOCATION] {
	if (!lookup("location")) {
		$var(rc) = $rc;

		route(TOVOICEMAIL);

		t_newtran();
		switch ($var(rc)) {
			case -1:
			case -3:
#				send_reply("404", "Not Found");
#				exit;
				return;
			case -2:
				send_reply("405", "Method Not Allowed");
				exit;
		}
	}
	else
	{
		# when routing via usrloc, log the missed calls also
		if (is_method("INVITE"))
		{
			xlog("LOCATION usrloc: $rU $ru");
			setflag(FLT_ACCMISSED);

			if($avp(dst_voicemail))
			{
				t_set_fr(20000);
			}
		}

		route(RELAY);
	}
}

# Presence server route
route[PRESENCE] {
	if(!is_method("PUBLISH|SUBSCRIBE"))
		return;

#!ifdef WITH_PRESENCE
	if (!t_newtran())
	{
		sl_reply_error();
		exit;
	};

	if(is_method("PUBLISH"))
	{
		handle_publish();
		t_release();
	}
	else
	if( is_method("SUBSCRIBE"))
	{
##		#http://saevolgo.blogspot.nl/2012/07/asterisk-behind-kamailio-voicemail-mwi.html
##		#Event: message-summary
		if(search_hf("Event", "message-summary", "a"))
		{
			route(AUTHENTICATE);

			if($avp(src_voicemail))
			{
				$avp(voicemail)=$avp(src_voicemail);

				remove_hf("Authorization");

				$ru = "sip:" + $avp(voicemail) + "@" + $sel(cfg_get.voicemail.srv_ip) + ":" + $sel(cfg_get.voicemail.srv_port);
				route(RELAY);

				exit;
			}
		}
		else
		{
			handle_subscribe();
			t_release();
		}
	}
	exit;
#!endif

	# if presence enabled, this part will not be executed
	if (is_method("PUBLISH") || $rU==$null)
	{
		sl_send_reply("404", "Not here");
		exit;
	}
	return;
}

# Authentication route
route[AUTH] {
#!ifdef WITH_AUTH

#!ifdef WITH_IPAUTH
	if((!is_method("REGISTER")) && allow_source_address())
	{
		# source IP allowed
		return;
	}
#!endif

	if(is_method("OPTIONS"))
	{
		return;
	}

	if (is_method("REGISTER") || from_uri==myself)
	{
		route(AUTHENTICATE);
	}
	# if caller is not local subscriber, then check if it calls
	# a local destination, otherwise deny, not an open relay here
	if (from_uri!=myself && uri!=myself)
	{
		sl_send_reply("403","Not relaying");
		exit;
	}

#!endif
	return;
}

# Caller NAT detection route
route[NATDETECT] {
#!ifdef WITH_NAT
	force_rport();
	if (nat_uac_test("19")) {
		if (is_method("REGISTER")) {
			fix_nated_register();
		} else {
			add_contact_alias();
		}
		setflag(FLT_NATS);
	}
#!endif
	return;
}

# RTPProxy control
route[NATMANAGE] {
#!ifdef WITH_NAT
	if (is_request()) {
		if(has_totag()) {
			if(check_route_param("nat=yes")) {
				setbflag(FLB_NATB);
			}
		}
	}

	rtpproxy_manage("cfo");

	if (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB)))
		return;


	if (is_request()) {
		if (!has_totag()) {
			add_rr_param(";nat=yes");
		}
	}
	if (is_reply()) {
		if(isbflagset(FLB_NATB)) {
			add_contact_alias();
		}
	}
#!endif
	return;
}

# URI update for dialog requests
route[DLGURI] {
#!ifdef WITH_NAT
	if(!isdsturiset()) {
		handle_ruri_alias();
	}
#!endif
	return;
}

# Routing to foreign domains
route[SIPOUT] {
	if (!uri==myself)
	{
		append_hf("P-hint: outbound\r\n");
		route(RELAY);
	}
}

# XMLRPC routing
#!ifdef WITH_XMLRPC
route[XMLRPC] {
	# allow XMLRPC from localhost
	if ((method=="POST" || method=="GET")
			&& (src_ip==127.0.0.1)) {
		# close connection only for xmlrpclib user agents (there is a bug in
		# xmlrpclib: it waits for EOF before interpreting the response).
		if ($hdr(User-Agent) =~ "xmlrpclib")
			set_reply_close();
		set_reply_no_connect();
		dispatch_rpc();
		exit;
	}
	send_reply("403", "Forbidden");
	exit;
}
#!endif

# route to voicemail server
route[TOVOICEMAIL] {
	if(!is_method("INVITE"))
		return;

	# check if VoiceMail server IP is defined
	if (strempty($sel(cfg_get.voicemail.srv_ip))) {
		xlog("SCRIPT: VoiceMail routing enabled but IP not defined\n");
		return;
	}

	if($avp(dst_voicemail))
	{
		$du=$null;
		$ru = "sip:tovm-" + $avp(dst_voicemail) + "@" + $sel(cfg_get.voicemail.srv_ip) + ":" + $sel(cfg_get.voicemail.srv_port);

		route(RELAY);

		exit;
	}

	return;
}

route[TRANSCODER]
{
	if(!is_method("INVITE"))
	{
		return;
	}

	$du=$null;
	$ru = "sip:transcode@" + $sel(cfg_get.voicemail.srv_ip) + ":" + $sel(cfg_get.voicemail.srv_port);

	if(!allow_source_address("1"))
	{
		route(ACCOUNTCODE);
	}

#	t_relay_to("udp:voicemail.pocos.nl:5060");
#	exit;

	route(SIPOUT);

	exit;
}

route[ACCOUNTCODE]
{
	if(is_method("INVITE|REFER"))
	{
		if($avp(src_accountcode))
		{
			append_hf("X-accountcode: $avp(src_accountcode)\r\n");
		}
		else
		{
#			sl_send_reply("438","Unknown accountcode");
#			exit;
#			return;
			send_reply("404", "Not Found - not authorized");
			exit;
		}
	}

	return;
}

route[CONTEXT]
{
	if(is_method("INVITE"))
	{
		if($avp(src_context))
		{
			append_hf("X-context: $avp(src_context)\r\n");
		}

		if($avp(src_forcedcontext))
		{
			append_hf("X-forcedcontext: $avp(src_forcedcontext)\r\n");
		}
	}

	return;
}

route[CALLERID]
{
	if(is_method("INVITE") && $au!=$null)
	{
		if(avp_db_query("SELECT value FROM usr_preferences WHERE username='$au' and attribute='callerids' and (value='$fU' or '$fU' like concat(value,'%')) ORDER BY value limit 1"))
		{
			$avp(s:assertedid)=$fU;
		}
		else if(avp_db_query("SELECT value FROM usr_preferences WHERE username='$au' and attribute='callerid' and (value='$fU' or '$fU' like concat(value,'%')) ORDER BY value limit 1"))
		{
			$avp(s:assertedid)=$fU;
		}
		else if($avp(src_callerid))
		{
xlog("src_callerid");
			if(!is_present_hf("Privacy") && $fn!="Anonymous" && $fn!="anonymous" && $fn!="\"Anonymous\"" && $fn!="\"anonymous\"")
			{
				$avp(from)=$fu;
				avp_subst("$avp(from)", "/sip:.*@/sip:$avp(src_callerid)@/");

				$avp(uacreplacefromuri)=1;
				$avp(uacfromuri)=$avp(from);
			}
			else
			{
				remove_hf("Privacy");
				append_hf("Privacy: id\r\n");

				$avp(uacreplacefromdisplay)=1;
				$avp(uacfromdisplay)="anonymous";

				$avp(uacreplacefromuri)=1;
				$avp(uacfromuri)="sip:anonymous@anonymous.invalid:"+$rp;
			}

			$avp(s:assertedid)=$avp(src_callerid);
		}
		else if(pcre_match("$au","^\+31[1-9][0-9]{5,}$$"))
		{
			$avp(s:assertedid)=$au;
		}
		else
		{
			xlog("CALLERID: Unknown callerid\n");
			sl_send_reply("403","Unknown callerid");
			exit;
		}

		if(!pcre_match("$avp(s:assertedid)","^\+?[0-9]+$$"))
		{
			xlog("CALLERID: Invalid callerid\n");
			sl_send_reply("403","Invalid callerid");
			exit;
		}
	}

	return;
}

route[CALLBARRING]
{
	if(is_method("INVITE") && $au!=$null)
	{
		if(avp_db_query("SELECT value FROM usr_preferences WHERE username='$au' and attribute='barred_prefix' and (value='$rU' or '$rU' like concat(value,'%')) ORDER BY value limit 1"))
		{
			sl_send_reply("403","Call barred");
			exit;
		}
	}

	return;
}

route[CALLREDIRECT]
{
	xlog("CALLREDIRECT");
	if(is_method("INVITE"))
	{
		xlog("CALLREDIRECT INVITE $avp(dst_redirectnumber) $avp(dst_accountcode)");
		if($avp(dst_redirectnumber))
		{
			xlog("dst_redirectnumber: $avp(dst_redirectnumber)");

			if($avp(dst_redirectnumber)=="1233")
			{
				route(TOVOICEMAIL);
				exit;
			}
			if($avp(dst_accountcode))
			{
				xlog("dst_accountcode: $avp(dst_accountcode)");

				append_hf("X-accountcode: $avp(dst_accountcode)\r\n");
				append_hf("P-Asserted-Identity: <sip:$tU@$td>\r\n");
				append_hf("X-ANI: $tU\r\n");

				$du=$null;
				$rU=$avp(dst_redirectnumber);
				$rd="voip.pocos.nl";
				$rp="5060";

				$avp(uacreplacetodisplay)=1;
				$avp(uactodisplay)="";

				$avp(uacreplacetouri)=1;
				$avp(uactouri)="sip:"+$rU+"@voip.pocos.nl";

				$var(i)=0;
				while($var(i)<$branch(count))
				{
					$(branch(uri)[$var(i)])=$null;
					$var(i) = $var(i) + 1;
				}

#				t_relay("voip.pocos.nl",5060);
				route(RELAY);

				exit;
			}
		}
	}

	return;
}

route[BUGFIXES]
{
	if($avp(dst_avaya_7_0))
	{
		append_hf("X-bugfix-avaya-7.0: 1\r\n");

		$avp(uacreplacetodisplay)=1;
		$avp(uactodisplay)="";

		$avp(uacreplacetouri)=1;
		$avp(uactouri)="";

		$avp(uacreplacefromdisplay)=1;
		$avp(uacfromdisplay)="";

		$avp(uacreplacefromuri)=1;
		$avp(uacfromuri)="";

		remove_hf("Contact");
		append_hf("Contact: <sip:anonymous@$fd>\r\n");
	}

	if(avp_db_query("SELECT value FROM usr_preferences WHERE username='$rU' and attribute='rewriterurito' ORDER BY value limit 1"))
	{
		append_hf("X-rewriterurito: 1\r\n");

		xlog("old: rU:[$rU] tU[$tU]");
		$rU=$tU;
		xlog("new: rU:[$rU] tU[$tU]");
	}

	return;
}

# manage outgoing branches
branch_route[MANAGE_BRANCH] {
	xdbg("new branch [$T_branch_idx] to $ru\n");
	route(NATMANAGE);
}

# manage incoming replies
onreply_route[MANAGE_REPLY] {
	xdbg("incoming reply\n");

	if(status=~"[12][0-9][0-9]")
		route(NATMANAGE);
}

# manage failure routing cases
failure_route[MANAGE_FAILURE] {
	xlog("failure_route MANAGE_FAILURE");

	route(NATMANAGE);

	if (t_is_canceled()) {
		exit;
	}

	if(t_check_status("3[0-9][0-9]") && $avp(src_accountcode))
	{
		xlog("30x, fu: $fu, ru: $ru, rU: $rU, au: $au, accountcode: $avp(dst_accountcode), ct: $ct, di: $di");
		$var(contact) = $T_rpl($ct);
		$var(contact) = $(var(contact){re.subst,/.*<(.*)>/\1/});
		xlog("=== contact header: $var(contact)\n");

		$du=$null;
		$rp="5060";
		$ru=$var(contact);
		xlog("30x, fu: $fu, ru: $ru, rU: $rU, au: $au, accountcode: $avp(dst_accountcode), ct: $ct, di: $di");
		route(RELAY);
		exit;
	}

	if(t_check_status("3[0-9][0-9]") && $avp(dst_accountcode))
	{
		xlog("30x, fu: $fu, ru: $ru, rU: $rU, au: $au, accountcode: $avp(dst_accountcode), ct: $ct, di: $di");
		xlog("=== contact header: $T_rpl($ct)\n");

		$var(contact) = $T_rpl($ct);
		$var(contact) = $(var(contact){re.subst,/.*sip:([0-9]+)@.*/\1/});
		xlog("=== contact header: $var(contact)\n");

		append_hf("X-accountcode: $avp(dst_accountcode)\r\n");
		append_hf("P-Asserted-Identity: <sip:$tU@$td>\r\n");
		append_hf("X-ANI: $tU\r\n");

		$du=$null;
		$rU=$var(contact);
		$rd="voip.pocos.nl";
		$rp="5060";
		$ru="sip:"+$var(contact)+"@voip.pocos.nl:5060";

		if($rU=~"^09[0-9]+$" || $rU=~"^00319[0-9]+" || $rU=~"^\+319[0-9]+")
		{
			send_reply("486","Invalid Redirect Destination");
			exit;
		}

		$var(i)=0;
		while($var(i)<$branch(count))
		{
			$(branch(uri)[$var(i)])=$null;
			$var(i) = $var(i) + 1;
		}

		$avp(uacreplacetodisplay)=1;
		$avp(uactodisplay)="";

		$avp(uacreplacetouri)=1;
		$avp(uactouri)="sip:"+$var(contact)+"@voip.pocos.nl";

		route(RELAY);
		exit;
	}

	# block call redirect based on 3xx replies.
	if (t_check_status("3[0-9][0-9]")) {
		xlog("WITH_BLOCK3XX");
		send_reply("404","Not found 3XX");
		exit;
	}

	# serial forking
	# - route to voicemail on busy or no answer (timeout)
	if (t_check_status("486|408")) {
		route(CALLREDIRECT);
		route(TOVOICEMAIL);
		exit;
	}

	# - route to transcoder on 488 Not Acceptable Here
	if (t_check_status("488")) {
		xlog("failure_route MANAGE_FAILURE 488");
		route(TRANSCODER);
		exit;
	}
}

onsend_route
{
	return;
}

route[DISPATCHER]
{
# && !allow_source_address("2"))
	if($au=="" && !search_hf("X-accountcode", "^[0-9]+", "a"))
	{
		send_reply("404", "Not Found in dispatcher - not authorized");
		exit;
	}

	if(allow_source_address("1") && !search_hf("X-accountcode", "^[0-9]+", "a"))
	{
		send_reply("404", "Not Found - possible loop detected");
		exit;
	}

	if(!($rU=~"^(\+|00)?[0-9]{3,20}$"))
	{
		send_reply("484", "Address Incomplete");
		exit;
	}

append_hf("X-DTMFMode: rfc2833\r\n");

	#dispatcherid=0 voorkomt dat gebruikers zonder usr_pref dispatcher kunnen bellen
	#dispatcherid=1 zou een default kunnen zijn
	$avp(dispatcherid)="1";
	$avp(dispatcheralgo)="4";

	if($avp(src_dispatcher))
	{
		$avp(dispatcherid)=$avp(src_dispatcher);
	}

	if(!ds_select_dst($avp(dispatcherid), $avp(dispatcheralgo)))
	{
		send_reply("404", "No dispatcher available");
		exit;
	}

	xlog("L_DBG", "--- SCRIPT: going to <$ru> via <$du>\n");
	t_on_failure("RTF_DISPATCH");

	return;
}

failure_route[RTF_DISPATCH]
{
	if (t_is_canceled()) {
		exit;
	}
# next DST - only for 500 or local timeout
	if (t_check_status("500") or (t_branch_timeout() and !t_branch_replied()))
	{
		if(ds_next_dst())
		{
			t_on_failure("RTF_DISPATCH");
			route(RELAY);
			exit;
		}
	}
}

event_route[dispatcher:dst-down] {
	xlog("L_ERR", "Destination down: $rm $ru ($du)\n");
}

event_route[dispatcher:dst-up] {
	xlog("L_ERR", "Destination up: $rm $ru\n");
}

route[SPECIALNUMBERS]
{
	# only local users allowed to call
	if($au==$null) {
		sl_send_reply("403", "Not Allowed");
		exit;
	}

	# translation from kpn servicenummers to national numberplan
	# *21*
	if ($rU =~ "^\*210?\*?")
	{
		$rU = $(rU{re.subst,/^\*210?\*([0-9])/133\1/}); # add redirect
		$rU = $(rU{re.subst,/^\*210?\*$/134/}); # disable redirect
	}

	if($rU=~"^1230[0-9]+$") # change password
	{
		strip(4);

		if(avp_db_query("SELECT mailbox FROM asterisk.voicemail WHERE mailbox='$au'"))
		{
			avp_db_query("UPDATE asterisk.voicemail set password='$rU' where mailbox='$au'");
		}
		else
		{
			avp_db_query("INSERT INTO asterisk.voicemail (`uniqueid`,`context`,`mailbox`,`password`,`fullname`,`tz`,`sendvoicemail`,`delete`) values (null,'default','$au','$rU','$au','CET','no','no')");
		}

                send_reply("486", "Voicemail PIN updated");
		exit;
	}
	else if($rU=~"^131[0-9]+$") # remove callerID
	{
		strip(3);

		append_hf("Privacy: id\r\n");

		$avp(uacreplacefromdisplay)=1;
		$avp(uacfromdisplay)="anonymous";

		$avp(uacreplacefromuri)=1;
		$avp(uacfromuri)="sip:anonymous@anonymous.invalid:"+$rp;

		$avp(uacreplacetodisplay)=1;
		$avp(uactodisplay)="";

		$avp(uacreplacetouri)=1;
		$avp(uactouri)="sip:"+$rU+"@"+$rd;
	}
	else if($rU=~"^132[0-9]+$") # add callerID
	{
		strip(3);

		remove_hf("Privacy");

		$avp(uacreplacetouri)=1;
		$avp(uactouri)="sip:"+$rU+"@"+$rd;
	}
        else if($rU=~"^1330[0-9]+$" || $rU=~"^1331233$") # add redirect
        {
                strip(3);

		if($rU=~"^09[0-9]+$" || $rU=~"^00319[0-9]+" || $rU=~"^\+319[0-9]+")
		{
			send_reply("404","Invalid Redirect Destination");
			exit;
		}

                avp_db_query("DELETE FROM usr_preferences where username='$au' and attribute='redirectnumber' and domain='pisco.pocos.nl'");
                avp_db_query("DELETE FROM usr_preferences where username='$au' and attribute='redirecttimeout' and domain='pisco.pocos.nl'");
                avp_db_query("INSERT INTO usr_preferences (id,username,domain,attribute,value) values (null,'$au','pisco.pocos.nl','redirectnumber','$rU')");

                send_reply("486", "Redirect enabled: $rU");
                exit;
        }
        else if($rU=~"^1350[0-9]+$" || $rU=~"^1351233$") # add redirect after time
	{
                strip(3);

		if($rU=~"^09[0-9]+$" || $rU=~"^00319[0-9]+" || $rU=~"^\+319[0-9]+")
		{
			send_reply("404","Invalid Redirect Destination");
			exit;
		}

                avp_db_query("DELETE FROM usr_preferences where username='$au' and attribute='redirectnumber' and domain='pisco.pocos.nl'");
                avp_db_query("DELETE FROM usr_preferences where username='$au' and attribute='redirecttimeout' and domain='pisco.pocos.nl'");
                avp_db_query("INSERT INTO usr_preferences (id,username,domain,attribute,value) values (null,'$au','pisco.pocos.nl','redirectnumber','$rU')");
                avp_db_query("INSERT INTO usr_preferences (id,username,domain,attribute,value) values (null,'$au','pisco.pocos.nl','redirecttimeout','20')");

                send_reply("486", "Redirect enabled: $rU");
                exit;
	}
	else
	{
		switch($rU)
		{
			case "1231": # enable voicemail
                		avp_db_query("DELETE FROM usr_preferences where username='$au' and attribute='voicemail' and domain='pisco.pocos.nl'");
                		avp_db_query("INSERT INTO usr_preferences (id,username,domain,attribute,value) values (null,'$au','pisco.pocos.nl','voicemail','$au')");
                		send_reply("486", "Voicemail enabled");
		                exit;
			break;
			case "1232": # disable voicemail
                		avp_db_query("DELETE FROM usr_preferences where username='$au' and attribute='voicemail' and domain='pisco.pocos.nl'");
                		send_reply("486", "Voicemail disabled");
                		exit;
			break;
			case "1233": # get voicemail
				if($avp(src_voicemail))
				{
					$ru = "sip:getvm-" + $avp(src_voicemail) + "@" + $sel(cfg_get.voicemail.srv_ip) + ":" + $sel(cfg_get.voicemail.srv_port);

				}
			break;
			case "1234": #
				if($avp(dst_voicemail))
				{
					route(TOVOICEMAIL);

					exit;
				}
				else
				{
					$ru = "sip:" + $rU + "@" + $sel(cfg_get.voicemail.srv_ip) + ":" + $sel(cfg_get.voicemail.srv_port);
				}
			break;
			case "134": # remove redirect
				avp_db_query("DELETE FROM usr_preferences where username='$au' and attribute='redirectnumber' and domain='pisco.pocos.nl'");

				send_reply("486", "Redirect deleted");
			break;
			default:
		}
	}
}

route[AREACODE]
{
        if(is_method("INVITE"))
        {
                if($avp(src_areacode)=~"^\+?[0-9]+$")
                {
                        $rU=$avp(src_areacode)+$rU;
                }
        }

        return;
}

route[INTERNATIONALPLUS]
{
	if($rU=~"^00[1-9][0-9]+$")
	{
		strip(2);
		prefix("+");
	}

	if($rU=~"^0[1-9][0-9]+$")
	{
		strip(1);
		prefix("+31");
	}

	if($tU=~"^00[1-9][0-9]+$")
	{
		$avp(ntU)="+"+$(tU{s.substr,2,0});
	}

	if($tU=~"^0[1-9][0-9]+$")
	{
		$avp(ntU)="+31"+$(tU{s.substr,1,0});
	}

	if($tn=~"^\"(\+|00)?[0-9]{3,20}")
	{
		$tn="\""+$avp(ntU)+"\"";
	}

	if($fU=~"^00[1-9][0-9]+$")
	{
		$avp(nfU)="+"+$(fU{s.substr,2,0});
	}

	if($fU=~"^0[1-9][0-9]+$")
	{
		$avp(nfU)="+31"+$(fU{s.substr,1,0});
	}

	if($fn=~"^\"(\+|00)?[0-9]{3,20}")
	{
		$fn="\""+$avp(nfU)+"\"";
	}

	$fU=$avp(nfU);
	$tU=$avp(ntU);

	if($avp(dst_rewriterurito)==1)
	{
		$rU=$avp(ntU);
	}
}

route[INTERNATIONAL]
{
	if($rU=~"^\+")
	{
		strip(1);
	}

	if($rU=~"^00")
	{
		strip(2);
	}

	if($rU=~"^0[1-9]")
	{
		strip(1);
		prefix("31");
	}

	if($tU=~"^\+")
	{
		$avp(ntU)=$(tU{s.substr,1,0});
	}

	if($tU=~"^00")
	{
		$avp(ntU)=$(tU{s.substr,2,0});
	}

	if($tU=~"^0[1-9]")
	{
		$avp(ntU)="31"+$(tU{s.substr,1,0});
	}

	if($tn=~"^\"(\+|00)?[0-9]{3,20}")
	{
		$tn="\""+$avp(ntU)+"\"";
	}

	if($fU=~"^\+")
	{
		$avp(nfU)=$(fU{s.substr,1,0});
	}

	if($fU=~"^00")
	{
		$avp(nfU)=$(fU{s.substr,2,0});
	}

	if($fU=~"^0[1-9]")
	{
		$avp(nfU)="31"+$(fU{s.substr,1,0});
	}

	if($fn=~"^\"(\+|00)?[0-9]{3,20}")
	{
		$fn="\""+$avp(nfU)+"\"";
	}

	$fU=$avp(nfU);
	$tU=$avp(ntU);

	if($avp(dst_rewriterurito)==1)
	{
		$rU=$avp(ntU);
	}
}

route[NATIONAL]
{
	if($rU=~"^\+31")
	{
		strip(3);
	}

	if($rU=~"^\+")
	{
		strip(1);
	}

	if($rU=~"^0031")
	{
		strip(4);
	}

	if($rU=~"^00")
	{
		strip(2);
	}

	if($rU=~"^0[1-9]")
	{
		strip(1);
	}

	if($tU=~"^\+31")
	{
		$avp(ntU)=$(tU{s.substr,3,0});
	}

	if($tU=~"^\+")
	{
		$avp(ntU)=$(tU{s.substr,1,0});
	}

	if($tU=~"^0031")
	{
		$avp(ntU)=$(tU{s.substr,4,0});
	}

	if($tU=~"^00")
	{
		$avp(ntU)=$(tU{s.substr,2,0});
	}

	if($tU=~"^0[1-9]")
	{
		$avp(ntU)=$(tU{s.substr,1,0});
	}

	if($tn=~"^\"(\+|00)?[0-9]{3,20}")
	{
		$tn="\""+$avp(ntU)+"\"";
	}

	if($fU=~"^\+31")
	{
		$avp(nfU)=$(fU{s.substr,3,0});
	}

	if($fU=~"^\+")
	{
		$avp(nfU)=$(fU{s.substr,1,0});
	}

	if($fU=~"^0031")
	{
		$avp(nfU)=$(fU{s.substr,4,0});
	}

	if($fU=~"^00")
	{
		$avp(nfU)=$(fU{s.substr,2,0});
	}

	if($fU=~"^0[1-9]")
	{
		$avp(nfU)=$(fU{s.substr,1,0});
	}

	if($fn=~"^\"(\+|00)?[0-9]{3,20}")
	{
		$fn="\""+$avp(nfU)+"\"";
	}

	$fU=$avp(nfU);
	$tU=$avp(ntU);

	if($avp(dst_rewriterurito)==1)
	{
		$rU=$avp(ntU);
	}
}

route[ACL]
{
	if(!avp_db_query("select value from usr_preferences where username='$au' and attribute='acl' and inet_aton(substring_index(value,'/',1))&(1 << 32) - 1 & ~((1 << (32 - substring_index(value,'/',-1))) - 1)=inet_aton('$si')&(1 << 32) - 1 & ~((1 << (32 - substring_index(value,'/',-1))) - 1)"))
	{
		xlog("L_ALERT","ACL: $rm from $fu (IP:$si:$sp)\n");
		sl_send_reply("403", "Not Allowed by ACL");
		exit;
	}

	return;
}

route[ATTRIBUTESRC]
{
	if($au!=$null)
	{
		if(avp_db_query("SELECT replace(replace(concat('src_',attribute),'.','_'),'-','_'),value FROM usr_preferences WHERE username='$au' ORDER BY attribute DESC"))
		{
			while($avp(i:1)!=$null)
			{
				$avp($avp(i:1)[*])=$null;
				$avp($avp(i:1))=$avp(i:2);

				$avp(i:1)=$null;
				$avp(i:2)=$null;
			}
		}
	}

	return;
}

route[ATTRIBUTEDST]
{
	if($rU!=$null)
	{
		if(avp_db_query("SELECT replace(replace(concat('dst_',attribute),'.','_'),'-','_'),value FROM usr_preferences WHERE username='$rU' ORDER BY attribute DESC"))
		{
			while($avp(i:1)!=$null)
			{
				$avp($avp(i:1)[*])=$null;
				$avp($avp(i:1))=$avp(i:2);

				$avp(i:1)=$null;
				$avp(i:2)=$null;
			}
		}
	}

	return;
}

route[AUTHENTICATE]
{
	$var(authenticated)=www_authenticate("$fd", "subscriber");
	xlog("L_ALERT","AUTHENTICATE[$var(authenticated)]: $rm from $fu (IP:$si:$sp)\n");

	if (!www_authenticate("$fd", "subscriber")) {
		xlog("L_ALERT","AUTHENTICATE: $rm from $fu (IP:$si:$sp)\n");
		www_challenge("$fd", "1");
		exit;
	}

	consume_credentials();

#	route(ACL);

	route(ATTRIBUTESRC);

	return;
}

route[STRIPHEADERS]
{
       remove_hf("Authorization");
       remove_hf("User-Agent");
       remove_hf("Server");
}

route[REMINDERS]
{
	if($au!=$null)
	{
		route(ATTRIBUTESRC);

		if($avp(src_redirectnumber))
		{
		       	$uac_req(method)="MESSAGE";
		       	$uac_req(ruri)="sip:"+$au+"@"+$si+":"+$sp;
		       	$uac_req(furi)="sip:"+$fU+"@"+$fd;
		       	$uac_req(hdrs)="Content-Type: text/plain\r\n";
		       	$uac_req(body)="Redirect active: "+$avp(src_redirectnumber);
		       	uac_req_send();
		}
	}

	return;
}

route[MAXCALLSOUTBOUND]
{
	if(method=="INVITE")
	{
		if($au!=$null && $avp(src_maxchannels)>0)
		{
			$var(channelsinbound) = 0;
			$var(channelsoutbound) = 0;
			get_profile_size("channelsinbound", "$au", "$var(channelsinbound)");
			get_profile_size("channelsoutbound", "$au", "$var(channelsoutbound)");

			xlog("MAXCALLSOUTBOUND: $au $var(channelsinbound) $var(channelsoutbound) / $avp(dst_maxchannels)\n");

			if(($var(channelsinbound)+$var(channelsoutbound))>=$avp(src_maxchannels))
			{
				send_reply("403","Call limit reached");
				exit;
			}

			set_dlg_profile("channelsoutbound","$au");
			dlg_set_property("ka-src");
		}
	}

	return;
}

route[MAXCALLSINBOUND]
{
	if(method=="INVITE")
	{
		if($avp(dst_maxchannels)>0)
		{
			$var(channelsinbound) = 0;
			$var(channelsoutbound) = 0;
			get_profile_size("channelsinbound", "$rU", "$var(channelsinbound)");
			get_profile_size("channelsoutbound", "$rU", "$var(channelsoutbound)");

			xlog("MAXCALLSINBOUND: $rU $var(channelsinbound) $var(channelsoutbound) / $avp(dst_maxchannels)\n");

			if(($var(channelsinbound)+$var(channelsoutbound))>=$avp(dst_maxchannels))
			{
				route(CALLREDIRECT);

				route(TOVOICEMAIL);

				send_reply("486","Call limit reached");
				exit;
			}

			set_dlg_profile("channelsinbound","$rU");
			dlg_set_property("ka-dst");
		}
	}

	return;
}

# active calls/dialog management
route[DIALOG]
{
	if (is_method("CANCEL|ACK|BYE") || (has_totag() && is_method("INVITE|BYE")))
	{
		dlg_manage();
		return;
	}

	if (is_method("INVITE") && !has_totag())
	{
		if($avp(dst_maxchannels))
		{
			route(MAXCALLSINBOUND);
		}

		if($avp(src_maxchannels))
		{
			route(MAXCALLSOUTBOUND);
		}

		dlg_manage();
	}
}

event_route[dialog:start]
{
	xlog("+++++ start of dialog [$dlg(h_entry):$dlg(h_id)]\n");
}

event_route[dialog:end]
{
	xlog("----- end of dialog [$dlg(h_entry):$dlg(h_id)]\n");
	route(REMINDERS);
}

event_route[dialog:failed]
{
	xlog("===== noanswer of dialog [$dlg(h_entry):$dlg(h_id)]\n");
}
